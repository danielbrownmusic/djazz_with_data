{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww14980\viewh10920\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 0. Description of software and goals\
1. MVC control flow using pattr\
2. Dynamic creation and destruction of objects: arrays and dicts\
	Hierarchies\
	Saving and reloading architecture\
3. Parameters and Listeners\
4. Dictionary readers and writers\
5. Python\
6. Thoughts on parameters
\f1\b0 \
\
\
	Djazz plays music in two ways: by selecting sections from scores, and by calculating improvisations using the factor oracle algorithm which is modified with pattern-matching methods. The input to the factor oracle come from scores and real-time input, either audio or MIDI, and is output as audio or MIDI. It is (being) written in Max with the factor-oracle and pattern-matching computation in Python. It uses Antescofo to generate notes both from scores and generated as improvisations in tempo.\
\
	Djazz improvises on songs using template files, which are lists of beats representing positions in the songs.  No other information is encoded in these templates: chord changes and notes are in different files: the scores used by Antescofo, and the databases used by the factor oracle. The song templates just let Antescofo and the factor oracle know which beat we\'92re on at a given time.  For songs whose formal structure includes verses or sections, this larger structure is also included in the template. It can also improvise over a \'93free\'94 structure by using a trivial template, just a short list of beats that loops.\
\
	Djazz is played by inputting a tap\'97manually, from a built-in metronome, or from another application. The tap triggers a beat, which triggers notes to be output from the factor oracle or the score, which triggers note data to be output from antescofo, which triggers sound to be output by the audio or midi outputs. [SLIDE]\
\
	You can see this control flow. The tap comes in on the left and comes out as sound from the midi bank on the right. The intermediate translations from tap to beat occur in the objects along the way.\
	The architecture: several players which can be of different types (all the possible types to be determined). Each functions independently but there is a master control for synchronising timing and for broadcasting global commands.\
	The control flow is represented functionally thus [SLIDE], where the \'93p\'92s\'94 are vectors of parameters that change the way each translation is done. The control flow of these p\'92s are what I\'92m going to talk about.\
\
\
\
______________________________________________________________\uc0\u8232 \page 
\f0\b 1. MVC control flow using pattr\

\f1\b0 \
\
The goals in rewriting Djazz are as follows.\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}prepare the software for distribution as a standalone\
{\listtext	\uc0\u8226 	}design an architecture that is extensible:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}Changes can be made in one area without creating bugs in other areas (dependence and modularity) \
{\listtext	\uc0\u8259 	}new functionality can be added without changing the existing code base \
{\listtext	\uc0\u8259 	}new functionality is easy to integrate. There are methods (not quite an SDK) for adding functionality. Some methods are more in-depth than others; some only require putting new max patches in properly named and organised folders.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}debugging is easy\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
MVC:\
\
Djazz uses the Model-View-Control design pattern.\
\
The model consists of the objects that do the processing. At the top level, there are various players and the master control just described.\
\
The model is controlled entirely by passing named parameters (not what Max calls \'93parameters\'94\'97I\'92ll talk about these in a later section) in the message format <variable-name> <variable-value>. These parameters are received in the leftmost inlet. The rightmost inlet is for changes in architecture: adding and subtracting components, which I\'92ll talk about later.\
\
The control is also the view, since they\'92re graphical controls, so I\'92ll refer the bpatcher containing the combined control and view as the view.\
\
Every parameter is stored in a 
\f2\i pattr
\f1\i0  object.\
\
As an example, here is a midi player object, which contains, among other components, a beat clock. The beat clock itself contains several components. Here we see one of them, \'ab\'a0loop_section\'a0\'bb and the 
\f2\i pattr
\f1\i0  objects it contains. [SLIDE]\
\
The 
\f2\i pattrhub 
\f1\i0 object invokes them, so a message \'93step 2\'94 will set the step pattr object in beat_clock to 2.\
\
Pattrs act hierarchically. The beat clock is named \'93beat_clock\'94 [SLIDE], so the step variable can be invoked by sending the beat clock the message \'93beat_clock::step 2.\'94 This double-colon format continues as the pattr object is nested in deeper levels of a hierarchy.\
\
The control consists of 
\f2\i bpatchers
\f1\i0 . No 
\f2\i bpatchers
\f1\i0  are in the model. These handle all the user interface logic like buttons and file selection. To change a parameter in the model, a pattr object must exist in the view with the same name as the corresponding one in the model. These names don\'92t conflict because they are in different sub patchers.\
\
 A pattrstorage object in the control keeps track of pattern changes. When the 
\f2\i outputmode
\f1\i0  attribute is non-zero, it will send the names and values of changed parameters out its outlet.  Hence, to communicate parameter changes to the model, the 
\f2\i pattrstorage
\f1\i0  output is sent out the control and into a 
\f2\i pattrthub\ul  
\f1\i0 \ulnone object at the top level of the model, which then broadcasts the changes to the proper places.\
\
Note: with this method, the interior 
\f2\i pattrhub
\f1\i0  objects end up not being used at all, but it\'92s still good to leave them in so that these objects can be reused and are not dependent on being called this way.\
\
\
 The hierarchical nature of the model, though, means that the parameter names sent from the control must have the same hierarchical structure as those in the model. Thus to control the \'93midi_player_1::beat_clock::loop_length\'94 parameter, there must be a control bpatcher called \'93midi_player_1\'94 that contains a bpatcher \'93beat_clock\'94 that contains a pattr \'93loop_length.\'94\
\
	For smaller systems, this could be a good method: the control and the model are parallel hierarchies.\
\
There are three problems with this method, though. The separation of model and control is supposed to give you the freedom to design the control without worrying about how things are being processed inside the model.\
\
 1. The control architecture is completely linked to the model architecture, which becomes very constraining, especially as the control logic in a complicated system probably does not reflect the way things are processed.\
  \
 2. You don\'92t necessarily want to control all the pattrs in the model. Some you might find unnecessary. This is not a big problem, but there is another related one:\
 3. Some pattrs in the model are not actually independent of each other at runtime.    Objects were created independently, but their functions in the system are dependent on each other or other objects\
\
It\'92s useful to design objects by thinking of their function independently of other objects, even though in the system they will not be independent. \
\
For example: \
	\
There is an object that outputs a given number of bangs at a given tempo: it has two pattrs, \'93tempo\'94 and \'93count\'94: the number of bangs to output. \
\
There is another object that changes the system tempo. \
\
The tempo object can be used to adjust the tempo by itself. But it is also used to control a parameter called \'93speed.\'94\
 Speed makes the musical output play twice as fast (double time), or in triplets, etc. Changing the speed to two means both doubling the tempo and setting the number of bangs to two. \
\
Thus the mapping from control pattrs to model pattrs is not one-to-one. We can imagine more complicated networks of dependencies among model parameters that we don\'92t want to reflect in the control.\
\
It\'92s useful to design these two objects separately because they can then be tested and maybe reused later. We end up with a model that is \'93feature-rich,\'94 and the job is now to decide which features we want to use, and how they will be reflected in the control.\
\
 Note: In terms of domain-driven design, it\'92s important not to spend too much time building objects that do lots of things that we may not ultimately care about using. We\'92re not building a library, we\'92re building an application. On the other hand, building separate small objects that handle specific independent functions is a useful way to make building blocks for our application. So there\'92s a trade-off: designing for the application with an eye for the kind of independent and reusable objects that will make up a library.  \
\
\
To address these three problems, Djazz uses the following method:\
\
For each important object that is made up of smaller components containing pattrs, like the \'93midi player,\'94 there is a parameter bank. [SLIDE] This bank consists only of the surface pattrs that the control will call.\
\
 The midi player and the parameter bank are wrapped in a larger object, and parameters from the bank are passed to the midi player through a translator object.\
\
 This translator handles the three problems above. It translates the surface parameters to their corresponding hierarchically named pattrs, which is very easy. In this object, too, are placed the objects that translate control variables into dependent model variables, like f(speed)\'97>[bang_count, tempo]. \
	Finally, unused variables simply aren\'92t called. But to be absolutely sure that uncalled variables don\'92t give us trouble, by storing state that have forgotten about, or by accidentally being called, due to sharing names accidentally with a control variable, we can turn off their visibility to the pattrstorage system, which means they can never be called. There is a javascript object I wrote which will turn off all the pattrs in an object. The first argument tells it what the visibility is, the second weather to recursively change the visibility in sub patchers. [EXAMPLE]\
\
	Now, in the control bpatcher, there is a similar parameter bank. Now the architectures of the control and the model are separate, and we are free to design the control as we want. As long as our controls send a message to the parameter bank with the right name, it will be sent to the model. [SLIDE] Now we can set up the controls as we like, and all the control logic\'97button operation, etc.\'97is completely independent of anything that happens in the model, and vice versa.\
\
 Because the pattrstorage object is inside the view, the namespace \'93view\'94 is not included in parameter names. \
\
The model outputs midi and audio, but it also outputs pattrs to any view that wants to receive them. It does this the same way as the control: a 
\f2\i pattrstorage
\f1\i0  object is at the top level of the model patcher, and when a pattr value is updated, it outputs the pattr name and value.\
	There are two types of pattrs that the model outputs: those that are specifically for a view, and the parameters that were sent from the control.\
[SLIDE]\
Because the control 
\f2\i is
\f1\i0  the view, this flow of pattrs becomes a loop. [SLIDE] The control/view pattrstorage sends values to the model\'92s pattrhub, and the model pattrstorage send values to the control/view\'92s pattrhub\
\
 To avoid an infinite loop, we make use the pattrstorage\'92s 
\f2\i outputmode
\f1\i0  attribute.\
\
 In the model, the output mode is 2: any changed values are sent out.\
 But in the view, the output mode is 6: values that are changed by objects in the 
\f2\i pattr
\f1\i0  system are 
\f2\i not 
\f1\i0 sent out. That is, only values that are changed by user interaction are sent out. Thus the values received by pattrhub are set but not passed on. The loop is broken. [SLIDE]\
\
 The control flow is clear\
 All of the state is centralised in the parameter banks\
 The state can be read in in real time by the client windows (easy to debug)\
 The state can be saved as preset files and reloaded.\
\
______________________________________________________________\
\page 
\f0\b 2. Dynamic creation and destruction of objects: arrays and dicts\
	Hierarchies\
	Saving and reloading architecture\
\

\f1\b0 Objects in djazz can be created and destroyed, so you can set up variable numbers of different types of players, and different midi and audio outputs.  The resulting configurations can then be saved and reloaded.
\f0\b \

\f1\b0 \
There are two data structures for saving objects: dictionaries and arrays, because some objects occur as ordered sets [midi tracks, effects], while others don\'92t (players, although they could).\
\
Ordered sets are placed in arrays using javascript. This way they can be addressed using their indices in the array, and array operations can be used to keep track and change them.\
\
 In javascript you can make arrays of objects.\
 To delete them, you have to both remove them from the patcher and remove them from the array or you will get undefined stuff.\
\
 The midi out bank is an example of a hierarchy of objects containing arrays. The bank contains tracks, and the tracks contain (among other things) midi effects. Tracks can be created and deleted, and so can effects. [SLIDE: tree]\
In addition, there are effects that apply to groups of tracks.\
\
BANK\
TRACK GROUP\
TRACK\
EFFECT_LIST\
EFFECT\
\
To make this structure:\
\
 Each object in the hierarchy contains a javascript object with the variable name \'ab\'a0components,\'a0\'bb which is responsible for creating, deleting, and dispatching messages to, and gathering data from the hierarchy objects it contains.\
\
 Each \'ab\'a0component\'a0\'bb object contains an array of objects. [SLIDE]\
\
 When objects are created, they are also placed in the array.\
\
 The code in each of these component objects is similar, and they could be abstracted into classes (prototypes) that components are derived from, if this method seems important enough to do that.\
\
The bank can be saved as a dictionary.\
\
Dictionary entries can be dictionaries and arrays, and array entries can be dictionaries and arrays. \
The midi bank dictionary contains arrays which contain dictionaries which contain arrays. Arbitrary nesting of dictionaries and arrays is possible. Access and modification becomes complicated, which I\'92ll talk about in section 4.\
\
To save a midi bank layout:\
\
 Javascript objects can declare attributes: values that can be accessed like normal max objects.  Attributes can be dictionaries. Attribute values can also have custom getters and setters, which means that the attribute value does not have be something actually stored. A getter can dynamically construct it when it is invoked, and a setter can do something other than save the given value.\
\
 The midi bank thus has an attribute \'ab\'a0bank_dict\'a0\'bb that, when queried, builds a dictionary from its components\'92 data. It writes an array of its tracks, calling each of its tracks to give it the required data for its given array index.  It calls each track by requesting a dict attribute from the track representing its components. The track builds a dict in the same way, calling its effect components. This process continues until a recursively-built dictionary is completed, then the midi bank passes it to the caller which writes it as a json file.\
\
 To reload the midi bank, the opposite occurs: the attribute value setter builds the track list by creating each track and then sending it the corresponding track dict so that it can build itself.\
\
 The actual dict values are at no time saved. \
\
[EXAMPLE]\
\
This can be applied to the entire architecture of a session, including all the players. It will be once we\'92ve worked out what all the players will be and how they will be arranged.\
\
 Because of the hierarchical arrangement of dictionaries, the midi bank can have its own set of presets that can be loaded and saved inside the preset of an entire session.\
\
To load an entire session including the pattr presets, the architecture dictionary has to be loaded first, and then the preset file.\
\
 Both the model and the view contain these component objects.\
 Communication between the view and model is in the rightmost wire.\
 Building from these dicts in the model and the view treat the dict like a model, and the model and view become its views.\
\
 Communication between the control and model during construction must be handled carefully and I\'92m interested in how to do it better. Originally I thought it would be great to include the dict attributes in the pattr system. Then they could be controlled in the same way that the rest of the parameters are controlled.\
The problem is this. [SLIDE] Javascript operates on a different (low-priority) thread than Max objects. When it calls Max to creat an object (new default), it passes control to this thread and continues to the next javascript command\'97we don\'92t know when the max command will finish in relation to the javascript.\
  As components in the view hierarchy are built, we can\'92t assume that their analogs in the model are built at the same time. Thus messages cannot be passed from one to the other.\
 Thus we cannot count on the pattr system working when the hierarchies are constructed. It has to use a different system.\
\
\
Creating effects: to create a midi effect, several easy standards must be met:\
	MIDI notes follow a given value (list of numbers)\
	MIDI comes in the left inlet and out the left inlet\
	A control/view and a model patch\
	Communication btw control and model occur via pattr, so pattrs with the same name (possibly hierarchic) must exist in both patches\
	Control and model patchers must be put in appropriately named subfolders of a folder titled by the effect name.\
 \
 If you do this, the effect will show up in the effect list.\
 This gives an easy, max-less way for developers to add their own effects.\
\
______________________________________________________________\
\

\f0\b \page 3. Parameters and Listeners
\f1\b0 \
\
The view/control exposes the variables that can be changed by the user. It also exposes the ways in which these controls can be changed: as bools, ints, floats, bounded, etc.\
\
 To attach a device or remote controller to the system, we can use the parameter system, which is independent from the pattr system but whose functionality overlaps with it in a useful way.  \
 \
\
 Each pattr can be saved as a parameter. In addition, each control surface object can be saved as a parameter. When objects containing parameters are created (like midi tracks), new parameters are created. \
\
 Two javascript objects then allow for device connection. The ParameterInfoProvider lists all the parameters, and alerts us when parameters are added or removed.\
\
 A javascript object contains a parameterInfoProvider and an array of ParameterListeners. Each time a parameter is added, a parameter listener is created for it.\
\
This javascript object centralises parameter communication. When a parameter is changed, it sends out its name and value. It receives values too.\
Essentially it\'92s a replica of the pattrstorage object. Why use it?\
Because the parameters are mapped to our control surface, not the model. We can take into account the control object logic; several buttons that change the same pattr can be saved as different parameters. Then we have more than one typed interface to the variable: we can control it as a toggle, or an int. For instance, the loop variable can be controlled by buttons with a launchpad, and by the number box with the ring. All you need to do is expose the desired control type and set is as a parameter. Again, the underlying model is unaffected. \
\
 Parameter listener and maxobjlisteners are hard to deal with because you can\'92t delete them.\
\
\
\
\
\
\
\
\
  \
\
\
\
\
\

\f0\b 4. Dictionary readers and writers\
\

\f1\b0 Dictionaries are used in different ways, for representing songs, architecture, and as another example for the launchpad, to keep track of how buttons are mapped to parameters and how parameters are mapped to lights. For this, several different types of dictionaries were required: \
\
DICTS AND ARRAYS\
\
\
one containing device-specific data mapping lights to midi and control values, (\'ab\'a0DEVICE\'a0\'bb)\
\
one containing the actual mappings the user creates, (\'ab\'a0MAP\'a0\'bb)\
\
One for the the system to read to map launchpad input to parameters, (\'ab\'a0CTRL\'a0\'bb)\
\
 And one for the system to read mapping parameters to lights. (\'ab\'a0VIEW\'a0\'bb)\
\
\
 The structure for each of these dicts can be done in different ways. Some criteria exist:\
\
 The user-created dict must be easy to create, either by editing the text or with a max object\
\
The program-read dicts must be efficient, easily read by the program.\
\
These two criteria are different and ask for different structures. Also, there is not a given good structure for any of these dicts, and we might want to change them later. We might even have to, as new launchpads, and new devices, use different formats.\
\
 So there\'92s not a general method for structuring these dicts. But we want something general so that we don\'92t have to rewrite a new patch and dict-accessors for each new launchpad.\
\
 To solve this, we create dict-readers and dict-writes, two types of javascript objects. Each one exports a set of methods that access data or modify data. The implementation of the methods are hidden to the user.\
Each one is specific to the context it acts in. The exported methods have the same names, but the implementation is different depending on the structure of the dict it reads or writes to.\
Thus, we can use a single javascript object to read the desired dictionaries and then translate them into the format the system needs.\
Each reader and writer is imported into the module using a require statement.\
If we change or add a new dict format, we write a new reader\'97which only involves rewriting the implementation of the exported methods\'97and replace it in the appropriate require field. These can also be jsarguments.\
This way, we have translators: objects that take a reader and a writer.\
\
\page 
\f0\b 6. Python
\f1\b0 \
\
The Python code is not complicated.\
\
 Agents are created by the main loop and maintain their own asynchronous loop to communicate with their max callers.\
\
One addition to this system is that objects do not inherit from an OSC object. They do not contain oscillation logic but are plain python objects. They are wrapped in objects that handle their command queues and osc communication. This way, their max analogs can be called like regular max objects.\
\
Python objects can be created and destroyed along with their max objects as described in section 2. This requires that the javascript code that creates objects also call (via its outlet) the OSC server with the appropriate constructor call.\
\
\
\
\
\
}